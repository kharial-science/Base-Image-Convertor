{"version":3,"sources":["components/Input.js","components/Square.js","App.js","index.js"],"names":["Input","value","undefined","isNaN","parseInt","this","props","String","replace","id","className","type","placeholder","onChange","handleInputChange","defaultValue","onClick","handleRemoveLineClick","handleAddLineClick","line","handleDisplayLineClick","handleRenderClick","Component","Square","style","backgroundColor","color","identifier","onPointerLeave","e","pressure","App","state","decNumber","binNumber","Array","fill","base","unshift","bind","handleSquareClick","convertNumberInBase","getNumberArrayDecimalValue","n","numberArray","push","Number","Math","trunc","reverse","slice","shift","decimalNumber","BigInt","i","forEach","digit","newBase","document","getElementById","setState","splice","length","event","target","array16Zeros","squareArray","key","colorArray","round","ReactDOM","render"],"mappings":"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","file":"static/js/main.ad0efcda.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n  \r\n  \r\n  \r\n  render() {\r\n\r\n    let value = undefined\r\n    if (!isNaN(parseInt(this.props.value, 10))) value = new String(this.props.value).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \") // add white space every 3 digits\r\n\r\n    return (\r\n      <div id=\"Input\">\r\n          <div className=\"input-container\">\r\n            <input \r\n              id=\"numberInput\" \r\n              type=\"text\" \r\n              placeholder=\"Number to convert\" \r\n              value={value}\r\n              onChange={this.props.handleInputChange}\r\n            ></input>\r\n          </div>\r\n          <div className=\"base-input-container\">\r\n            <input\r\n              id=\"baseInput\"\r\n              type=\"text\"\r\n              placeholder=\"Base\"\r\n              defaultValue='2'\r\n            >\r\n            </input>\r\n          </div>\r\n          <div className='buttons-container'>\r\n            <button className=\"removeline\" onClick={this.props.handleRemoveLineClick}>\r\n              -\r\n            </button>\r\n            <button className=\"addline\" onClick={this.props.handleAddLineClick}>\r\n              +\r\n            </button>\r\n            <button className={`togglebitlines ${this.props.line === 'on' ? 'on' : 'off'}`} onClick={this.props.handleDisplayLineClick}>\r\n              |\r\n            </button>\r\n          </div>\r\n          <button className=\"render\" onClick={this.props.handleRenderClick}>\r\n            render\r\n          </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass Square extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div \r\n                id=\"Square\" \r\n                style={{\r\n                    backgroundColor: this.props.color,\r\n                }}\r\n                onClick={() => {\r\n                    this.props.onClick(this.props.identifier)\r\n                }}\r\n                onPointerLeave={(e) => {\r\n                    if(e.pressure > 0) this.props.onClick(this.props.identifier)\r\n                }}\r\n            >\r\n                {/* {this.props.display} */}\r\n            </div>\r\n        )\r\n    }\r\n  \r\n}\r\n\r\nexport default Square;","/* global BigInt */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport './style/index.css'\r\n\r\nimport Input from './components/Input'\r\nimport Square from './components/Square'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      decNumber: undefined,\r\n      binNumber: new Array(16).fill(0),\r\n      line: 'off',\r\n      base: 2,\r\n    }\r\n    this.state.binNumber.unshift(2)\r\n\r\n    this.handleRenderClick = this.handleRenderClick.bind(this)\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n    this.handleSquareClick = this.handleSquareClick.bind(this)\r\n    this.handleAddLineClick = this.handleAddLineClick.bind(this)\r\n    this.handleRemoveLineClick = this.handleRemoveLineClick.bind(this)\r\n    this.handleDisplayLineClick = this.handleDisplayLineClick.bind(this)\r\n    this.convertNumberInBase = this.convertNumberInBase.bind(this)\r\n    this.getNumberArrayDecimalValue = this.getNumberArrayDecimalValue.bind(this)\r\n  }\r\n\r\n  convertNumberInBase(n, base) {\r\n    const numberArray = []\r\n    while (n >= base) {\r\n      numberArray.push(Number(n) % Number(base))\r\n      n = Math.trunc(Number(n) / Number(base))\r\n    }\r\n    numberArray.push(Number(n))\r\n    numberArray.reverse()\r\n    numberArray.unshift(base)\r\n    return numberArray\r\n  }\r\n\r\n  getNumberArrayDecimalValue(numberArray) {\r\n    numberArray = numberArray.slice()\r\n    let base = numberArray.shift()\r\n    let decimalNumber = BigInt(0)\r\n    let i = 0\r\n    numberArray.reverse()\r\n    numberArray.forEach(digit => {\r\n      if (i != 0) decimalNumber = BigInt(decimalNumber) + BigInt(BigInt(digit)*BigInt(base)**BigInt(i))\r\n      else decimalNumber = BigInt(decimalNumber) + BigInt(digit)\r\n      i++\r\n    })\r\n    return decimalNumber\r\n  }\r\n\r\n  handleRenderClick() {\r\n\r\n    // saving base in state\r\n    let newBase = parseInt(document.getElementById('baseInput').value, 10)\r\n    if (newBase <= 1) newBase = this.state.base\r\n    this.setState({\r\n      base: newBase\r\n    }, () => {\r\n      // retrieving bin number from input\r\n      let binNumber\r\n      if (this.state.decNumber) {\r\n        binNumber = this.convertNumberInBase(this.state.decNumber, this.state.base)\r\n        binNumber.splice(1, 0, ...new Array(17 - (binNumber.length % 16)).fill(0))\r\n      } else {\r\n        binNumber = new Array(16).fill(0)\r\n        binNumber.unshift(this.state.base)\r\n      }\r\n\r\n      // setting binNumber in state after retrieving and generating corresponding squareArray to display\r\n      this.setState({ \r\n        binNumber: binNumber\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    this.setState({\r\n      decNumber: BigInt(event.target.value.replace(/\\s/g, '')) // remove all white spaces\r\n    })\r\n  }\r\n\r\n  handleSquareClick(i) {\r\n\r\n    // changing binNumber in state as well, switching corresponding 0 to 1 or vice versa + changing corresponding decNumber in input\r\n    let binNumber = this.state.binNumber\r\n    Number(binNumber[i+1]) == Number(this.state.base-1) ? binNumber[i+1] = 0 : binNumber[i+1]++\r\n    let decNumber = this.getNumberArrayDecimalValue(binNumber)\r\n    this.setState({\r\n      decNumber: decNumber,\r\n      binNumber: binNumber\r\n    })\r\n\r\n  }\r\n\r\n  handleAddLineClick() {\r\n\r\n    // generating 16 0s in the binNumber in state and regenerating squareArray to create a new black line of squares\r\n    let array16Zeros = new Array(16).fill(0)\r\n    let binNumber = this.state.binNumber.slice()\r\n    binNumber.splice(1, 0, ...array16Zeros)\r\n    this.setState({\r\n      binNumber: binNumber\r\n    })\r\n\r\n  }\r\n\r\n  handleRemoveLineClick() {\r\n\r\n    // deleting 16 first digits of binNumber and actualizing squareArray and decNumber\r\n    if (this.state.binNumber.length > 17) {\r\n      let binNumber = this.state.binNumber\r\n      binNumber.splice(1, 16)\r\n      this.setState({\r\n        binNumber: binNumber,\r\n      }, () => {\r\n        let decNumber = this.getNumberArrayDecimalValue(this.state.binNumber)\r\n        this.setState({\r\n          decNumber: decNumber\r\n        }) // refresh\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  handleDisplayLineClick() {\r\n    if(this.state.line === \"off\") {\r\n      this.setState({\r\n        line: \"on\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        line: \"off\"\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let squareArray = []\r\n    let key = 0\r\n    let colorArray = []\r\n    for (let i = 0; i < this.state.base; i++) {\r\n      colorArray.push(`rgb(${Math.round(256/(this.state.base-1)*i)}, ${Math.trunc(256/(this.state.base-1)*i)}, ${Math.trunc(256/(this.state.base-1)*i)})`)\r\n    }\r\n    for (const i of this.state.binNumber.slice(1, this.state.binNumber.length)) {\r\n      squareArray.push(<Square key={key} identifier={key} color={colorArray[i]} onClick={this.handleSquareClick}/>)\r\n      key++\r\n    }\r\n\r\n    return (\r\n      <div id=\"App\">\r\n        <header>\r\n          <h1>Base Image Convertor</h1>\r\n          <p>Here is the kfs number convertor into image in any base.</p>\r\n        </header>\r\n        <Input \r\n          handleRenderClick={this.handleRenderClick} \r\n          value={this.state.decNumber} \r\n          handleInputChange={this.handleInputChange}\r\n          handleAddLineClick={this.handleAddLineClick}\r\n          handleRemoveLineClick={this.handleRemoveLineClick}\r\n          handleDisplayLineClick={this.handleDisplayLineClick}\r\n          line={this.state.line}\r\n        />\r\n        <div id=\"Display\">\r\n          <div id=\"line1\" className={`line ${this.state.line}`}></div>\r\n          <div id=\"line2\" className={`line ${this.state.line}`}></div>\r\n          <div id=\"line3\" className={`line ${this.state.line}`}></div>\r\n          {squareArray ? squareArray : <div></div>}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}